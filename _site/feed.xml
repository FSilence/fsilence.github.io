<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-04-11T09:38:20+00:00</updated><id>http://localhost:4000/</id><title type="html">FSilence’s Blog</title><subtitle>FSilence的个人博客</subtitle><author><name>FSilence</name></author><entry><title type="html">gradle调试断点</title><link href="http://localhost:4000/2017/04/11/gradle-debug/" rel="alternate" type="text/html" title="gradle调试断点" /><published>2017-04-11T00:00:00+00:00</published><updated>2017-04-11T00:00:00+00:00</updated><id>http://localhost:4000/2017/04/11/gradle-debug</id><content type="html" xml:base="http://localhost:4000/2017/04/11/gradle-debug/">&lt;p&gt;调试断点我们的gradle插件&lt;/p&gt;

&lt;p&gt;我们免不了需要调试gradle脚本。但是要特殊说明的是， 现在还没有办法调试gradle的脚本文件， 我们只能通过pringln 来输出message， 然后在Gradle Console中查看。&lt;br /&gt;
我们这里要说的是利用远程调试，去断点调试自己编写的gradle插件。其实gradle的脚本使用groovy编写的而groovy也是运行在jvm上的，所以这里的调试方法就是远程调试jvm的方法，此方法同样适用于调试编译时注解（编译时注解 要注意clean项目）。&lt;/p&gt;

&lt;h2 id=&quot;配置remote&quot;&gt;配置remote&lt;/h2&gt;
&lt;p&gt;首先我们先点击Edit Config 点击+号选择remote: &lt;br /&gt;
&lt;img src=&quot;/images/gradle-debug1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后复制下面代码，将suspend=n改为suspend=y，表示一直阻塞等待:&lt;br /&gt;
&lt;img src=&quot;/images/gradle-debug2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;你也可以修改name为你喜欢的名字，然后点击ok。&lt;/p&gt;

&lt;h2 id=&quot;配置运行时候的参数&quot;&gt;配置运行时候的参数&lt;/h2&gt;
&lt;p&gt;然后我们有几种方法来运行我们的gradle命令，，&lt;/p&gt;

&lt;h3 id=&quot;方法一&quot;&gt;方法一&lt;/h3&gt;
&lt;p&gt;我们可以在命令行执行:&lt;/p&gt;
&lt;pre&gt;
 export GRADLE_OPTS=&quot;-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005&quot;
 &lt;/pre&gt;
&lt;p&gt;然后直接运行你的gradle命令，你会方法会一直等待5005的端口，知识后依旧可以debug运行刚才的remote，进行断点调试了。&lt;br /&gt;
 你可以通过 unset GRADLE_OPTS 来取消这个配置&lt;/p&gt;

&lt;h3 id=&quot;方法二&quot;&gt;方法二&lt;/h3&gt;
&lt;p&gt;在gradle中找到你要断点的命令，点击create config:&lt;br /&gt;
 &lt;img src=&quot;/images/gradle-debug3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后在VM options中输入你刚才复制并修改的参数：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/gradle-debug4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后点击运行，效果同上 会等待设置的5005端口，然后再切到remote 执行debug即可。&lt;/p&gt;

&lt;h3 id=&quot;方法三&quot;&gt;方法三&lt;/h3&gt;

&lt;p&gt;直接在gradle.properties中设置jvm参数（刚才复制的内容）:&lt;/p&gt;

&lt;pre&gt;
  org.gradle.jvmargs=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005
  &lt;/pre&gt;</content><author><name>FSilence</name></author><summary type="html">调试断点我们的gradle插件</summary></entry><entry><title type="html">gradle在不同系统下适配</title><link href="http://localhost:4000/2017/04/10/gradlew-env-get/" rel="alternate" type="text/html" title="gradle在不同系统下适配" /><published>2017-04-10T00:00:00+00:00</published><updated>2017-04-10T00:00:00+00:00</updated><id>http://localhost:4000/2017/04/10/gradlew-env-get</id><content type="html" xml:base="http://localhost:4000/2017/04/10/gradlew-env-get/">&lt;p&gt;有时我们需要自己定制一些gradle的执行task，可能会用到一些系统中的其它环境，这时需要我们针对不同的OS做一些适配。&lt;/p&gt;

&lt;p&gt;##判断当前系统环境
方法一：&lt;br /&gt;
获取os的name判断其中是否包含windows字段&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;
def isWindows() {
    return System.properties['os.name'].contains('windows');
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;方法二： 
通过OperatingSystem类中的方法来判断当前环境&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;
def isWindows() {
 return org.gradle.internal.os.OperatingSystem.current().isWindows()
}
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;##获取系统环境变量&lt;br /&gt;
在windows环境下可以通过  $System.env来获取 比如获取ANDROID_HOME 可以调用$System.env.ANDROID_HOME（注意在path下配置ANDROID_HOME变量）&lt;/p&gt;

&lt;p&gt;在linux和mac上可以通过which指令来获取环境变量，比如我要获取adb的环境变量可以通过以下代码获取：&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;
&quot;which adb&quot;.execute().inputStream.readLines()[0]
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;mark：&lt;br /&gt;
TODO此方法可以在命令行中调用gradlew命令的时候获取到adb的环境变量，但是如果在Android Studio上直接运行时获取不到的，暂时不知道为什么先mark以下&lt;/p&gt;</content><author><name>FSilence</name></author><summary type="html">有时我们需要自己定制一些gradle的执行task，可能会用到一些系统中的其它环境，这时需要我们针对不同的OS做一些适配。</summary></entry><entry><title type="html">用GithubPages搭建个人Blog</title><link href="http://localhost:4000/2017/03/29/github-pages-jekyll/" rel="alternate" type="text/html" title="用GithubPages搭建个人Blog" /><published>2017-03-29T00:00:00+00:00</published><updated>2017-03-29T00:00:00+00:00</updated><id>http://localhost:4000/2017/03/29/github-pages-jekyll</id><content type="html" xml:base="http://localhost:4000/2017/03/29/github-pages-jekyll/">&lt;p&gt;用GithubPages + jekyll搭建你的个人Blog, 专注于内容。&lt;/p&gt;

&lt;pre&gt;
内容大纲：
1.配置githubpages  
2.选择你的jekyll模板    
3.开始写Blog  
&lt;/pre&gt;
&lt;p&gt;以前总是羡慕别人有自己的Blog，一直想有有个属于自己的Blog网站。之前断断续续写过一些，用过csdn 用过 eoe的blog（现在已经没有这个功能了）。 也尝试过wordpress等，买过云服务器。最后总是不了了之。前段时间偶然看到了githubpages, 眼前一亮
，这么nb的功能以前竟然不知道。然后花了几天时间fork了别人的Blog 修改后搭建了自己的Blog。&lt;/p&gt;

&lt;h2 id=&quot;配置githubs&quot;&gt;配置githubs&lt;/h2&gt;
&lt;p&gt;官网上有很详细的介绍，基本就是你新建一个以你的github名字开始+github.io的仓库，具体的配置过程可以移步官网 &lt;a href=&quot;http://github.io&quot;&gt;github.io&lt;/a&gt; 我就不做重复的搬运了 &lt;br /&gt;
之后可以在工程的Settings中做一些配置，比如指定你的个人域名，&lt;/p&gt;

&lt;h2 id=&quot;配置jekyll&quot;&gt;配置jekyll&lt;/h2&gt;
&lt;p&gt;关于jekyll 可以移步 &lt;a href=&quot;https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/&quot;&gt;Using jekyll with GithubPages&lt;/a&gt;&lt;br /&gt;
基本是说jekyll是一个静态html的生成框架。&lt;br /&gt;
关于jekyll的配置模板网上有很多 你可以选择你喜欢的主题加以修改&lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;jekyll themes&lt;/a&gt;&lt;br /&gt;
如果你像我一样对前端不了解的话，别着急你可以fork别人的blog 然后修改其中的内容，告诉你个小技巧 你可以在github上搜索github,io 然后选择你喜欢的blog fork后修改其中的关键内容就行，我就是fork的 &lt;a href=&quot;https://github.com/mzlogin/mzlogin.github.io&quot;&gt;https://github.com/mzlogin/mzlogin.github.io&lt;/a&gt;&lt;br /&gt;
一般你只需要修改_config.yml 和CNAME中的东西即可，是不是很容易啊。如果项目中设计到其它第三方的插件，你需要注册你个人的插件并替换相关内容，比如用到的评论模块,你需要换成你个人的。&lt;/p&gt;

&lt;h2 id=&quot;开始blog&quot;&gt;开始Blog&lt;/h2&gt;
&lt;p&gt;将项目push到你新建的github仓库中，之后你就可以开始写Blog了。&lt;/p&gt;

&lt;p&gt;本文只是一个阐述，详细过程可以参照其他人的Blog &lt;a href=&quot;http://www.jianshu.com/p/3f355c7872d5&quot;&gt;http://www.jianshu.com/p/3f355c7872d5&lt;/a&gt;&lt;/p&gt;</content><author><name>FSilence</name></author><summary type="html">用GithubPages + jekyll搭建你的个人Blog, 专注于内容。</summary></entry><entry><title type="html">博客测试</title><link href="http://localhost:4000/2017/03/29/FirstBlogTest/" rel="alternate" type="text/html" title="博客测试" /><published>2017-03-29T00:00:00+00:00</published><updated>2017-03-29T00:00:00+00:00</updated><id>http://localhost:4000/2017/03/29/FirstBlogTest</id><content type="html" xml:base="http://localhost:4000/2017/03/29/FirstBlogTest/">&lt;p&gt;博客第一次测试&lt;/p&gt;

&lt;p&gt;欢迎关注公众号:&lt;br /&gt;
&lt;img src=&quot;/wx_code.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>FSilence</name></author><summary type="html">博客第一次测试</summary></entry></feed>